#########################
##    High priority    ##
#########################

Done - Add name to pixel writer
    Done + Expansion to this is to refactor PixelWriter2D to not specify pattern
    Done + Need to transfer all builtin patterns to use new system
    + Replace builtin manager dictionary when all patterns have names?
    + Pattern manager should probably be rewritten as part of this refactor
- Get correct pattern on startup


###########################
##    Medium priority    ##
###########################

- Update README.md to better describe the project and document progress
- Surround WebServer code in try/except/finally and report any errors
- Snake can get caught in infinite loop
- Test script that creates an automatic connection to wifi
    + Use subprocess.popen() not os.popen()
- Commit bootLauncher.sh
- Test IpAddressGetter when not connected to wifi
- Text colour should be configurable


########################
##    Low priority    ##
########################

- Add more builtin patterns
- Commit better demo mathematical patterns
- script to set dark theme? Dark theme by default?
- Swipe looks rubbish when slow
    + Storm rain suffers the same problem
- Maybe some update mechanism by polling github version file?


#######################
##    No priority    ##
#######################

- When snake loses flash before restarting
- Make Game of life restart when reaches a 1, 2 or 3 period steady state
- Reformat builtin patterns into 2 rows and/or scrolled table
- Formatting isn't perfect, should count tags and brackets as it goes to avoid using the same close tag or close bracket twice


###################################
## Probably never to be finished ##
###################################

- Create wifi connector object to run before starting the web server
    + Display the ip address on the table
    + Warn the use if network not found
    + Since auto connecting to the wifi is complex on a pi this could be shipped
      out to an esp8266 running micropython which would parse the web requests,
      send the responses and then send the pi serial messages to change patterns
- This has has been made where the esp8266 simply redirects the get requests to the pi via serial then
  the pi parses, acts then sends the html response back to the esp8266 via serial
- Both sides seem to work independently but combining them has been fruitless so far
- MockWebLauncher can be used to show the pi end responding to a get request
- Putty can be used to show the esp8266 sending a get request then forwarding on the returned html